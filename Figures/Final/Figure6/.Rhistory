predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336")  # top 10 CAP1; AUC = 0.646
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
ps.rna <- readRDS("/Users/thynguyen/Documents/GitHub/Kalan_Lab/scripts/unguyen2/DARPA/DARPA_ps_Baseline_Final/ps_data.rds")
ps.rna <- subset_taxa(ps.rna, Domain == "d__Bacteria")
ps.rna <- subset_samples(ps.rna, CollectionTime == "Baseline")
ps.rna <- prune_taxa(taxa_sums(ps.rna) > 0, ps.rna)
ps.rna <- tax_glom(ps.rna, "Species")
ps.rna.comp.B <- transform_sample_counts(ps.rna, function(x) x / sum(x))
sample_data(ps.rna.comp.B)$HealingOutcome <- factor(sample_data(ps.rna.comp.B)$HealingOutcome,
levels=c("Yes", "No"))
# Extract data from phyloseq
otu_table <- as.data.frame(t(otu_table(ps.rna.comp.B)))
sample_data <- as.data.frame(sample_data(ps.rna.comp.B))
# Prepare data
combined_data <- cbind(sample_data$HealingOutcome, otu_table)
colnames(combined_data)[1] <- "label"
combined_data$label <- as.factor(combined_data$label)
# Split data
set.seed(123)
trainIndex <- createDataPartition(combined_data$label, p = 0.7, list = FALSE) # training (70%) and testing (30%) datasets
training_data <- combined_data[trainIndex, ]
testing_data <- combined_data[-trainIndex, ]
# Model building
model <- glm(label ~ ., data = training_data[, c(1, 2:11)], family = "binomial") # Testing using first 10 taxa
tax <- data.frame(ps.rna.comp.B@tax_table)
# Top 10 species from constraint analysis
# OTU2496 = s__Haemophilus_parainfluenzae
# OTU1089 = s__Corynebacterium_striatum
# OTU2692 = s__Moraxella_catarrhalis
# OTU1321 = s__Helcococcus_kunzii
# OTU1260 = s__Fastidiosipila_sanguinis
# OTU2873 = s__Enterobacter_hormaechei
# OTU1335 = s__Anaerococcus_obesiensis
# OTU2884 = s__Klebsiella_pneumoniae
# OTU1685 = s__Staphylococcus_aureus
# OTU1336 = s__Anaerococcus_vaginalis
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336")  # top 10 CAP1; AUC = 0.646
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336",
#                   "OTU2892", "OTU1318", "OTU2741", "OTU1326", "OTU1334", "OTU2492", "OTU2691", "OTU2887", "OTU1464", "OTU1687")  # top 20 CAP1; AUC = 0.531
# Using top 20 lowers the AUC from 0.646 (top 10 species) to 0.531 (top 20 species)
# Using the top 2-3 species results in highest AUC values
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
#model <- glm(label ~ ., data = training_data, family = "binomial") # Testing using all columns
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add the diagonal reference line (dashed)
#lines(x = c(0, 1), y = c(0, 1), lty = 2, col = "gray")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336",
"OTU2892", "OTU1318", "OTU2741", "OTU1326", "OTU1334", "OTU2492", "OTU2691", "OTU2887", "OTU1464", "OTU1687")  # top 20 CAP1; AUC = 0.531
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336")  # top 10 CAP1; AUC = 0.646
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336")  # top 10 CAP1; AUC = 0.646
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
# Add AUC value as a legend
legend("bottomright",
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend("bottomright",
legend = paste("AUC =", round(auc_value, 3)),
#bty = "n",  # No box around legend
text.col = "#669bbc")
View(dfu_nmds_plot)
View(ps.rna.comp.B)
View(tax)
View(sample_data)
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend("bottomright",
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(1, 0.2,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(1, 0,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(0.2, 0.2,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(0.2, 0.4,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(0.4, 0.4,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
ps.rna <- readRDS("/Users/thynguyen/Documents/GitHub/Kalan_Lab/scripts/unguyen2/DARPA/DARPA_ps_Baseline_Final/ps_data.rds")
ps.rna <- subset_taxa(ps.rna, Domain == "d__Bacteria")
#ps.rna <- subset_samples(ps.rna, CollectionTime == "Baseline")
ps.rna <- prune_taxa(taxa_sums(ps.rna) > 0, ps.rna)
ps.rna <- tax_glom(ps.rna, "Species")
ps.rna.comp.B <- transform_sample_counts(ps.rna, function(x) x / sum(x))
sample_data(ps.rna.comp.B)$HealingOutcome <- factor(sample_data(ps.rna.comp.B)$HealingOutcome,
levels=c("Yes", "No"))
# Extract data from phyloseq
otu_table <- as.data.frame(t(otu_table(ps.rna.comp.B)))
sample_data <- as.data.frame(sample_data(ps.rna.comp.B))
# Prepare data
combined_data <- cbind(sample_data$HealingOutcome, otu_table)
colnames(combined_data)[1] <- "label"
combined_data$label <- as.factor(combined_data$label)
# Split data
set.seed(123)
trainIndex <- createDataPartition(combined_data$label, p = 0.7, list = FALSE) # training (70%) and testing (30%) datasets
training_data <- combined_data[trainIndex, ]
testing_data <- combined_data[-trainIndex, ]
# Model building
model <- glm(label ~ ., data = training_data[, c(1, 2:11)], family = "binomial") # Testing using first 10 taxa
tax <- data.frame(ps.rna.comp.B@tax_table)
# Top 10 species from constraint analysis
# OTU2496 = s__Haemophilus_parainfluenzae
# OTU1089 = s__Corynebacterium_striatum
# OTU2692 = s__Moraxella_catarrhalis
# OTU1321 = s__Helcococcus_kunzii
# OTU1260 = s__Fastidiosipila_sanguinis
# OTU2873 = s__Enterobacter_hormaechei
# OTU1335 = s__Anaerococcus_obesiensis
# OTU2884 = s__Klebsiella_pneumoniae
# OTU1685 = s__Staphylococcus_aureus
# OTU1336 = s__Anaerococcus_vaginalis
# Assuming you have a list of specific OTU names you want to use
#selected_otus <- c("OTU2496") # Top 1 CAP1; AUC = 0.406
#selected_otus <- c("OTU2496", "OTU1089") # Top 2 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692") # Top 3 CAP1; AUC = 0.698
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321") # Top 4 CAP1; AUC = 0.688
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260") # Top 5 CAP1; AUC = 0.583
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336")  # top 10 CAP1; AUC = 0.646
#selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336",
#                   "OTU2892", "OTU1318", "OTU2741", "OTU1326", "OTU1334", "OTU2492", "OTU2691", "OTU2887", "OTU1464", "OTU1687")  # top 20 CAP1; AUC = 0.531
# Using top 20 lowers the AUC from 0.646 (top 10 species) to 0.531 (top 20 species)
# Using the top 2-3 species results in highest AUC values
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
#model <- glm(label ~ ., data = training_data, family = "binomial") # Testing using all columns
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Print AUC value
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(0.4, 0.4,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
# Add the diagonal reference line (dashed)
#lines(x = c(0, 1), y = c(0, 1), lty = 2, col = "gray")
# Performance metrices
coords <- coords(roc_obj, "best", ret = c("threshold", "sensitivity", "specificity"))
print(coords)
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336",
"OTU2892", "OTU1318", "OTU2741", "OTU1326", "OTU1334", "OTU2492", "OTU2691", "OTU2887", "OTU1464", "OTU1687")  # top 20 CAP1; AUC = 0.531
selected_otus <- c("OTU2496", "OTU1089", "OTU2692","OTU1321", "OTU1260", "OTU2873", "OTU1335", "OTU2884", "OTU1685", "OTU1336",
"OTU2892", "OTU1318", "OTU2741", "OTU1326", "OTU1334", "OTU2492", "OTU2691", "OTU2887", "OTU1464", "OTU1687",
"OTU2727", "OTU2896", "OTU2373", "OTU1198", "OTU1325")
# Make sure these columns exist in your data
selected_otus <- selected_otus[selected_otus %in% colnames(training_data)]
# Create a formula that includes only the selected OTUs
formula_str <- paste("label ~", paste(selected_otus, collapse = " + "))
formula_obj <- as.formula(formula_str)
# Build the model with your specific OTUs
model <- glm(formula_obj, data = training_data, family = "binomial")
# Prediction
predicted_probs <- predict(model, newdata = testing_data, type = "response")
# Create ROC curve
roc_obj <- roc(testing_data$label, predicted_probs)
# Print AUC value
auc_value <- auc(roc_obj)
print(paste("AUC =", round(auc_value, 3)))
# Visualize ROC curve
plot(roc_obj,
col = "#669bbc",
lwd = 2,
main = "",
lty = 1,
xlab = "False Positive Rate (1-Specificity)",
ylab = "True Positive Rate (Sensitivity)")
# Add AUC value as a legend
legend(0.4, 0.4,
legend = paste("AUC =", round(auc_value, 3)),
bty = "n",  # No box around legend
text.col = "#669bbc")
